import { emitSystemMessage } from "../utils/chatUtils.js";

// –î–ª—è race protection ‚Äî –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ–¥–∞ (–∏–ª–∏ —á–µ—Ä–µ–∑ Redis-lock, –Ω–æ —Ç—É—Ç –Ω–µ –Ω—É–∂–Ω–æ)
export async function handleJoinRoom(
  socket,
  io,
  client,
  { name, room, playerId, password }
) {
  console.log(`Player ${name} (${playerId}) is trying to join room: ${room}`);

  let raw = await client.get(`room:${room}`);
  if (!raw) {
    socket.emit("joinRoomError", { message: "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    return;
  }
  let roomData = JSON.parse(raw);

  if (roomData.private && roomData.password !== password) {
    socket.emit("joinRoomError", { message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
    return;
  }

  // –ù–∞–π–¥–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ playerId (–Ω–∞ —Å–ª—É—á–∞–π —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞)
  let existing = roomData.players.find((p) => p.playerId === playerId);
  let isHost = false;

  // –°–Ω–∞—á–∞–ª–∞ ‚Äî –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º id
  if (existing) {
    existing.id = socket.id;
    existing.name = name;
    isHost = existing.isHost;
  } else {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ
    if (roomData.players.length >= roomData.maxPlayers) {
      socket.emit("joinRoomError", { message: "–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç" });
      return;
    }
    // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
    isHost = roomData.players.length === 0;
    roomData.players.push({
      id: socket.id,
      name,
      playerId,
      isHost,
      alive: true,
      role: null,
      ready: false,
    });

    // üëâ –°–†–ê–ó–£ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ‚Äî –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç!
/*     if (roomData.players.length > roomData.maxPlayers) {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
      roomData.players = roomData.players.filter(p => p.playerId !== playerId);
      await client.set(`room:${room}`, JSON.stringify(roomData));
      console.log('-1 player')
      socket.emit("joinRoomError", { message: "–í –∫–æ–º–Ω–∞—Ç–µ —É–∂–µ –Ω–µ—Ç –º–µ—Å—Ç" });
      return;
    } */
  }

  // –§–∞–∑–∞ "–Ω–µ –ª–æ–±–±–∏" ‚Äî –Ω–µ –ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—ã—Ö
  if (roomData.phase !== "lobby" && !existing) {
    socket.emit("gameAlreadyStarted");
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
  await client.set(`room:${room}`, JSON.stringify(roomData));
  socket.join(room);
  socket.data = { room, playerId };

  // –†–∞—Å—Å—ã–ª–∞–µ–º roomData –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
  io.to(room).emit("roomData", {
    players: roomData.players.map((p) => ({
      name: p.name,
      playerId: p.playerId,
      isHost: p.isHost,
      alive: p.alive,
      ready: !!p.ready,
    })),
    phase: roomData.phase,
    maxPlayers: roomData.maxPlayers,
  });

  // –õ–∏—á–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–≤—à–µ–º—É—Å—è "roomJoined"
  socket.emit("roomJoined", {
    players: roomData.players.map((p) => ({
      name: p.name,
      playerId: p.playerId,
      isHost: p.isHost,
      alive: p.alive,
      ready: !!p.ready,
    })),
    gameStarted: roomData.phase !== "lobby",
    maxPlayers: roomData.maxPlayers,
  });

  // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–ª—å/—Å—Ç–∞—Ç—É—Å
  if (roomData.phase && roomData.phase !== "lobby") {
    const player = roomData.players.find((p) => p.playerId === playerId);
    if (player && player.role) {
      socket.emit("roleAssigned", { role: player.role });
    }
    if (player && player.alive === false) {
      socket.emit("playerKilled", playerId);
    }
    io.to(room).emit("phaseChanged", {
      phase: roomData.phase,
      maxPlayers: roomData.maxPlayers,
      players: roomData.players.map((p) => ({
        name: p.name,
        playerId: p.playerId,
        isHost: p.isHost,
        alive: p.alive,
        ready: !!p.ready,
      })),
    });
  }

  // –ß–∞—Ç-–∏—Å—Ç–æ—Ä–∏—è
  const historyKey = `chat:${room}`;
  const storedMessages = await client.lRange(historyKey, 0, -1);
  const messages = storedMessages.map((m) => JSON.parse(m));
  socket.emit("chatHistory", messages);

  // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  roomData.phase === "lobby" && await emitSystemMessage(io, client, room, `${name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ.`);
  socket.emit("welcome", { playerId, isHost });
}
