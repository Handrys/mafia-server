// handlers/joinRoom.js
import { emitSystemMessage } from "../utils/chatUtils.js";
import { validate as uuidValidate } from "uuid";

// –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
const ROOM_ID_RE = /^[\w-]{3,30}$/; // a-zA-Z0-9_-
const PLAYER_NAME_RE = /^[\p{L}0-9 _\-@]{1,20}$/u; // –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª, _-@
const MAX_PASSWORD_LEN = 30;

function buildUserNameFromUser(user) {
  if (!user || typeof user !== "object") return null;
  const candidate =
    (user.username ? `@${user.username}` : null) ||
    [user.first_name, user.last_name].filter(Boolean).join(" ") ||
    user.first_name ||
    null;

  if (!candidate) return null;

  let display = candidate.normalize("NFKC").trim();
  if (display.length > 20) display = display.slice(0, 20).trim();

  // –º—è–≥–∫–∞—è —Å–∞–Ω–∞—Ü–∏—è
  if (!PLAYER_NAME_RE.test(display)) {
    display = display.replace(/[^\p{L}0-9 _\-@]/gu, "").trim();
    if (!display) return null;
    if (display.length > 20) display = display.slice(0, 20).trim();
  }
  return display;
}

function makeFallbackName() {
  return "–ò–≥—Ä–æ–∫-" + Math.random().toString(36).slice(2, 6);
}

export async function handleJoinRoom(
  socket,
  io,
  client,
  { user, room, playerId, password }
) {
  // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª–µ–π –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  if (typeof room !== "string" || !ROOM_ID_RE.test(room)) {
    return socket.emit("joinRoomError", { message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–æ–º–Ω–∞—Ç—ã." });
  }
  if (typeof playerId !== "string" || !uuidValidate(playerId)) {
    return socket.emit("joinRoomError", { message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π playerId." });
  }
  if (password !== undefined) {
    if (typeof password !== "string" || password.length > MAX_PASSWORD_LEN) {
      return socket.emit("joinRoomError", { message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å." });
    }
  }

  const roomKey = `room:${room}`;

  // WATCH
  await client.watch(roomKey);
  const raw = await client.get(roomKey);
  if (!raw) {
    await client.unwatch();
    return socket.emit("joinRoomError", { message: "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });
  }

  const roomData = JSON.parse(raw);

  // –ü–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è)
  if (roomData.private && roomData.password !== password) {
    await client.unwatch();
    return socket.emit("joinRoomError", { message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å." });
  }

  // –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ playerId ‚Äî —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞
  let existing = roomData.players.find((p) => p.playerId === playerId);

  // –ï—Å–ª–∏ –ù–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–≥—Ä–æ–∫ –∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–µ –≤ –ª–æ–±–±–∏ ‚Äî –Ω–µ –≤–ø—É—Å–∫–∞–µ–º
  if (!existing && roomData.phase !== "lobby") {
    await client.unwatch();
    return socket.emit("gameAlreadyStarted");
  }

  // –ï—Å–ª–∏ –ù–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–≥—Ä–æ–∫ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –º–µ—Å—Ç
  if (!existing && roomData.players.length >= roomData.maxPlayers) {
    await client.unwatch();
    return socket.emit("joinRoomError", { message: "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç." });
  }

  // –°–æ–±–∏—Ä–∞–µ–º –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–µ)
  const userAvatar = user?.photo_url || null;
  // –ò–º—è: –µ—Å–ª–∏ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫ ‚Äî —Å—Ç—Ä–æ–∏–º –∏–∑ user, –∏–Ω–∞—á–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
  let userNameForNew = buildUserNameFromUser(user) || makeFallbackName();

  // –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
  let isHost = false;
  if (existing) {
    // –†–µ–∫–æ–Ω–Ω–µ–∫—Ç: –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∏–º—è/—Ä–æ–ª—å/alive/ready
    existing.id = socket.id;
    // –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä, –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –Ω–æ–≤—ã–π
    if (userAvatar) existing.avatar = userAvatar;
    isHost = existing.isHost;
  } else {
    // –ù–æ–≤—ã–π –≤—Ö–æ–¥
    isHost = roomData.players.length === 0;
    // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ–¥ —Ä–µ–≥—ç–∫—Å–ø
    if (!PLAYER_NAME_RE.test(userNameForNew)) {
      userNameForNew = makeFallbackName();
    }
    roomData.players.push({
      id: socket.id,
      name: userNameForNew,
      avatar: userAvatar,
      playerId,
      isHost,
      alive: true,
      role: null,
      ready: false,
    });
  }

  // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å
  const tx = client.multi();
  tx.set(roomKey, JSON.stringify(roomData));
  const execResult = await tx.exec();
  if (!execResult) {
    // –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∑–∞–ø–∏—Å–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —Å —Ñ—Ä–æ–Ω—Ç–∞
    return socket.emit("joinRoomError", { message: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑." });
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º —Å–æ–∫–µ—Ç –∫ –∫–æ–º–Ω–∞—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∫–µ—Ç–∞
  socket.join(room);
  socket.data = { room, playerId };

  // –ü—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
  const publicPlayers = roomData.players.map((p) => ({
    name: p.name,
    avatar: p.avatar,
    playerId: p.playerId,
    isHost: p.isHost,
    alive: p.alive,
    ready: !!p.ready,
  }));

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  io.to(room).emit("roomData", {
    players: publicPlayers,
    phase: roomData.phase,
    maxPlayers: roomData.maxPlayers,
  });

  socket.emit("roomJoined", {
    players: publicPlayers,
    gameStarted: roomData.phase !== "lobby",
    maxPlayers: roomData.maxPlayers,
  });

if (roomData.phase !== "lobby") {
  const me = roomData.players.find(p => p.playerId === playerId);

  if (me?.role) {
    socket.emit("roleAssigned", { role: me.role });
  }

  if (!me?.alive) {
    socket.emit("playerKilled", playerId);
  }

  // üëá –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–∞—Ö
  if (roomData.dayVotes?.[playerId]) {
    socket.emit("voteStatus", {
      phase: "day",
      voted: true,
      targetId: roomData.dayVotes[playerId],
    });
  }
  if (roomData.nightVotes?.[playerId]) {
    socket.emit("voteStatus", {
      phase: "night",
      voted: true,
      targetId: roomData.nightVotes[playerId],
    });
  }
  if (roomData.voteWindow) {
  socket.emit("votingWindow", {
    stage: roomData.voteWindow.stage,
    openAt: roomData.voteWindow.openAt,
    endsAt: roomData.voteWindow.endsAt,
    audience: roomData.voteWindow.audience,
  });
}

  io.to(room).emit("phaseChanged", {
    phase:      roomData.phase,
    timers: roomData.timers || null,
    maxPlayers: roomData.maxPlayers,
    players:    publicPlayers,
  });
}

  // –ß–∞—Ç-–∏—Å—Ç–æ—Ä–∏—è
  const historyKey = `chat:${room}`;
  const stored = await client.lRange(historyKey, 0, -1);
  socket.emit(
    "chatHistory",
    stored.map((m) => JSON.parse(m))
  );

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ –≤ –ª–æ–±–±–∏ –∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–æ–≤–æ–º –≤—Ö–æ–¥–µ
  if (roomData.phase === "lobby" && !existing) {
    await emitSystemMessage(
      io,
      client,
      room,
      `${userNameForNew} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ.`
    );
  }

  socket.emit("welcome", { playerId, isHost });
}
