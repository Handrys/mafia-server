// server/handlers/restartGame.js
import { sendRoomState } from "../utils/sendRoomState.js";

export async function handleRestartGame(socket, io, client) {
  const { room } = socket.data;
  if (!room) return;

  const raw = await client.get(`room:${room}`);
  let roomData = raw ? JSON.parse(raw) : null;
  if (!roomData) return;

  // –°–±—Ä–æ—Å –Ω–∞ lobby, –Ω–æ –≤—Å–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ
  roomData.phase = "lobby";
  roomData.gameOverTimeoutActive = false;
  roomData.gameStarted = false;

  // –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
  roomData.players.forEach(p => {
    p.role  = null;
    p.alive = true;
    p.ready = false;
  });

  // üíß –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–Ω—è/–Ω–æ—á–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
  roomData.dayVotes          = {};
  roomData.nightVotes        = {};
  roomData.victimId          = null;
  roomData.doctorChoice      = null;
  roomData.doctorVoted       = false;
  roomData.lastKilled        = null;
  roomData.lastSaved         = null;
  roomData.lastDoctorSavedId = null;

  // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  await client.del(`chat:${room}`);

  await client.set(`room:${room}`, JSON.stringify(roomData));

  // –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  sendRoomState(io, room, roomData);
  io.to(room).emit("gameRestarted"); // –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–µ–π—Ç—ã/UI
}
